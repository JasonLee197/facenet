arguments: C:/Users/wesley/Google ‘∆∂À”≤≈Ã/Sync/19 spring/CSE 691/project/facenet/src/train_softmax.py
--------------------
tensorflow version: 1.7.0
--------------------
git hash: b'6a250469413971e53896d1f16665f0fb9be1d324'
--------------------
b"diff --git a/src/train_softmax.py b/src/train_softmax.py\nindex 1bfcb28..be82fbd 100644\n--- a/src/train_softmax.py\n+++ b/src/train_softmax.py\n@@ -44,6 +44,7 @@ from tensorflow.python.ops import data_flow_ops\n from tensorflow.python.framework import ops\n from tensorflow.python.ops import array_ops\n \n+import tensorflow as tf\n \n def main(args):\n     network = importlib.import_module(args.model_def)\n@@ -272,7 +273,7 @@ def main(args):\n \n                 print('Saving statistics')\n                 with h5py.File(stat_file_name, 'w') as f:\n-                    for key, value in stat.iteritems():\n+                    for key, value in stat.items():\n                         f.create_dataset(key, data=value)\n \n     return model_dir\n@@ -496,8 +497,8 @@ def save_variables_and_metagraph(sess, saver, summary_writer, model_dir, model_n\n     # Save the model checkpoint\n     print('Saving variables')\n     start_time = time.time()\n-    checkpoint_path = os.path.join(model_dir, 'model-%s.ckpt' % model_name)\n-    saver.save(sess, checkpoint_path, global_step=step, write_meta_graph=False)\n+    checkpoint_path = os.path.join(model_dir, 'model-%s.ckpt' % model_name) #save\n+    saver.save(sess, checkpoint_path, global_step=step, write_meta_graph=False) #save\n     save_time_variables = time.time() - start_time\n     print('Variables saved in %.2f seconds' % save_time_variables)\n     metagraph_filename = os.path.join(model_dir, 'model-%s.meta' % model_name)\n@@ -519,27 +520,27 @@ def parse_arguments(argv):\n     parser = argparse.ArgumentParser()\n \n     parser.add_argument('--logs_base_dir', type=str,\n-                        help='Directory where to write event logs.', default='~/logs/facenet')\n+                        help='Directory where to write event logs.', default='C:/Users/wesley/Google \xe4\xba\x91\xe7\xab\xaf\xe7\xa1\xac\xe7\x9b\x98/Sync/19 spring/CSE 691/project/facenet/output/log/facenet')#~/logs/facenet\n     parser.add_argument('--models_base_dir', type=str,\n-                        help='Directory where to write trained models and checkpoints.', default='~/models/facenet')\n+                        help='Directory where to write trained models and checkpoints.', default='C:/Users/wesley/Google \xe4\xba\x91\xe7\xab\xaf\xe7\xa1\xac\xe7\x9b\x98/Sync/19 spring/CSE 691/project/facenet/output/models/facenet')\n     parser.add_argument('--gpu_memory_fraction', type=float,\n-                        help='Upper bound on the amount of GPU memory that will be used by the process.', default=1.0)\n+                        help='Upper bound on the amount of GPU memory that will be used by the process.', default=0.8)##############\n     parser.add_argument('--pretrained_model', type=str,\n                         help='Load a pretrained model before training starts.')\n     parser.add_argument('--data_dir', type=str,\n                         help='Path to the data directory containing aligned face patches.',\n-                        default='~/datasets/casia/casia_maxpy_mtcnnalign_182_160')\n+                        default='G:/train/test') # default='~/datasets/casia/casia_maxpy_mtcnnalign_182_160')\n     parser.add_argument('--model_def', type=str,\n                         help='Model definition. Points to a module containing the definition of the inference graph.',\n                         default='models.inception_resnet_v1')\n     parser.add_argument('--max_nrof_epochs', type=int,\n-                        help='Number of epochs to run.', default=500)\n+                        help='Number of epochs to run.', default=3)#############\n     parser.add_argument('--batch_size', type=int,\n                         help='Number of images to process in a batch.', default=90)\n     parser.add_argument('--image_size', type=int,\n                         help='Image size (height, width) in pixels.', default=160)\n     parser.add_argument('--epoch_size', type=int,\n-                        help='Number of batches per epoch.', default=1000)\n+                        help='Number of batches per epoch.', default=200) #########\n     parser.add_argument('--embedding_size', type=int,\n                         help='Dimensionality of the embedding.', default=128)\n     parser.add_argument('--random_crop',"